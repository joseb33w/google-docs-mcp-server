#!/usr/bin/env node

/**
 * Google Docs Pro Agent Test Suite
 * 
 * This script tests the Google Docs Pro Agent with various scenarios
 * to ensure all functionality is working correctly.
 */

import { GoogleDocsService } from './google-docs-mcp/dist/google-docs-service.js';
import 'dotenv/config';

class GoogleDocsAgentTester {
  constructor() {
    this.service = new GoogleDocsService();
    this.testResults = [];
  }

  async runAllTests() {
    console.log('🚀 Starting Google Docs Pro Agent Tests...\n');

    try {
      await this.testDocumentCreation();
      await this.testContentManagement();
      await this.testDocumentOrganization();
      await this.testPDFExport();
      await this.testTemplateGeneration();
      
      this.printResults();
    } catch (error) {
      console.error('❌ Test suite failed:', error.message);
    }
  }

  async testDocumentCreation() {
    console.log('📄 Testing Document Creation...');
    
    try {
      const result = await this.service.createDocument('Agent Test - Document Creation - October 17, 2025');
      
      this.testResults.push({
        test: 'Document Creation',
        status: 'PASS',
        details: `Created: ${result.title} (ID: ${result.documentId})`
      });
      
      console.log('✅ Document created successfully');
      return result.documentId;
    } catch (error) {
      this.testResults.push({
        test: 'Document Creation',
        status: 'FAIL',
        details: error.message
      });
      console.log('❌ Document creation failed:', error.message);
      throw error;
    }
  }

  async testContentManagement() {
    console.log('📝 Testing Content Management...');
    
    try {
      // Create a test document first
      const doc = await this.service.createDocument('Agent Test - Content Management - October 17, 2025');
      
      // Add structured content
      const content = `
# Content Management Test

## Executive Summary
This document tests the agent's content management capabilities.

## Key Features Tested
- Text appending
- Content structure
- Professional formatting

## Results
✅ Content management working correctly

---
*Generated by Google Docs Pro Agent - October 17, 2025*
`;

      await this.service.appendText(doc.documentId, content);
      
      this.testResults.push({
        test: 'Content Management',
        status: 'PASS',
        details: `Content added to: ${doc.title}`
      });
      
      console.log('✅ Content management working');
      return doc.documentId;
    } catch (error) {
      this.testResults.push({
        test: 'Content Management',
        status: 'FAIL',
        details: error.message
      });
      console.log('❌ Content management failed:', error.message);
      throw error;
    }
  }

  async testDocumentOrganization() {
    console.log('📁 Testing Document Organization...');
    
    try {
      const documents = await this.service.listDocuments(10);
      
      this.testResults.push({
        test: 'Document Organization',
        status: 'PASS',
        details: `Found ${documents.totalDocs} documents`
      });
      
      console.log(`✅ Document organization working (${documents.totalDocs} documents found)`);
      return documents;
    } catch (error) {
      this.testResults.push({
        test: 'Document Organization',
        status: 'FAIL',
        details: error.message
      });
      console.log('❌ Document organization failed:', error.message);
      throw error;
    }
  }

  async testPDFExport() {
    console.log('📄 Testing PDF Export...');
    
    try {
      // Create a test document
      const doc = await this.service.createDocument('Agent Test - PDF Export - October 17, 2025');
      
      // Add content
      await this.service.appendText(doc.documentId, `
# PDF Export Test

This document tests the PDF export functionality.

## Test Results
- Document created: ✅
- Content added: ✅
- PDF export: Testing...

---
*Test completed: ${new Date().toISOString()}*
`);

      // Export as PDF
      const outputPath = `/Users/josebarron/Downloads/agent-test-export-${Date.now()}.pdf`;
      await this.service.exportPDF(doc.documentId, outputPath);
      
      this.testResults.push({
        test: 'PDF Export',
        status: 'PASS',
        details: `PDF exported to: ${outputPath}`
      });
      
      console.log('✅ PDF export working');
      return outputPath;
    } catch (error) {
      this.testResults.push({
        test: 'PDF Export',
        status: 'FAIL',
        details: error.message
      });
      console.log('❌ PDF export failed:', error.message);
      throw error;
    }
  }

  async testTemplateGeneration() {
    console.log('📋 Testing Template Generation...');
    
    try {
      const template = await this.service.createDocument('Meeting Notes Template - October 17, 2025');
      
      const templateContent = `
# Meeting Notes Template

**Date:** [DATE]
**Time:** [TIME]
**Location:** [LOCATION]

## Attendees
- [ATTENDEE 1]
- [ATTENDEE 2]
- [ATTENDEE 3]

## Agenda
1. [AGENDA ITEM 1]
2. [AGENDA ITEM 2]
3. [AGENDA ITEM 3]

## Discussion Points
### [TOPIC 1]
- [DISCUSSION POINT 1]
- [DISCUSSION POINT 2]

### [TOPIC 2]
- [DISCUSSION POINT 1]
- [DISCUSSION POINT 2]

## Action Items
| Task | Owner | Due Date | Status |
|------|-------|----------|--------|
| [TASK 1] | [OWNER] | [DATE] | [STATUS] |
| [TASK 2] | [OWNER] | [DATE] | [STATUS] |

## Next Meeting
**Date:** [DATE]
**Time:** [TIME]
**Agenda:** [AGENDA ITEMS]

---
*Template created by Google Docs Pro Agent - October 17, 2025*
`;

      await this.service.appendText(template.documentId, templateContent);
      
      this.testResults.push({
        test: 'Template Generation',
        status: 'PASS',
        details: `Template created: ${template.title}`
      });
      
      console.log('✅ Template generation working');
      return template.documentId;
    } catch (error) {
      this.testResults.push({
        test: 'Template Generation',
        status: 'FAIL',
        details: error.message
      });
      console.log('❌ Template generation failed:', error.message);
      throw error;
    }
  }

  printResults() {
    console.log('\n📊 Test Results Summary:');
    console.log('========================');
    
    const passed = this.testResults.filter(r => r.status === 'PASS').length;
    const failed = this.testResults.filter(r => r.status === 'FAIL').length;
    
    this.testResults.forEach(result => {
      const icon = result.status === 'PASS' ? '✅' : '❌';
      console.log(`${icon} ${result.test}: ${result.details}`);
    });
    
    console.log('\n📈 Summary:');
    console.log(`✅ Passed: ${passed}`);
    console.log(`❌ Failed: ${failed}`);
    console.log(`📊 Total: ${this.testResults.length}`);
    
    if (failed === 0) {
      console.log('\n🎉 All tests passed! Google Docs Pro Agent is ready to use.');
    } else {
      console.log('\n⚠️  Some tests failed. Please check the errors above.');
    }
  }
}

// Run the tests
const tester = new GoogleDocsAgentTester();
tester.runAllTests().catch(console.error);
